--- /usr/src/gamecon_gpio_rpi-1.3/gamecon_gpio_rpi.c-orig	2014-04-22 02:10:23.060000000 +0200
+++ /usr/src/gamecon_gpio_rpi-1.3/gamecon_gpio_rpi.c	2014-04-22 02:16:54.220000000 +0200
@@ -76,7 +76,7 @@
 	GC_MAX
 };
 
-#define GC_REFRESH_TIME	HZ/100
+#define GC_REFRESH_TIME	HZ/20
 
 struct gc_pad {
 	struct input_dev *dev;
@@ -154,25 +154,42 @@
 	/* set correct GPIOs to outputs */
 	*gpio &= ~ningpio->cmd_setinputs;
 	*gpio |= ningpio->cmd_setoutputs;
-	
+
+	/* Envoyer code generique pour manette generique */
+	/*for (i=0;i<16;i++) {
+		GPIO_CLR = ningpio->valid_bits;
+                udelay(4);
+                GPIO_SET = ningpio->valid_bits;
+                udelay(2);
+	}*/	
+
+
+	/* send stop bit (let pull-up handle the last 2us)*/
+ /*     GPIO_CLR = ningpio->valid_bits;
+        udelay(2);
+        GPIO_SET = ningpio->valid_bits;
+
+	// Attendre quelques sequences
+	udelay(400);
+*/	
 	/* transmit a data request to pads */
 	for (i = 0; i < ningpio->request_len; i++) {
 		if ((unsigned)((ningpio->request >> i) & 1) == 0) {
 			GPIO_CLR = ningpio->valid_bits;
-			udelay(3);
+			udelay(4);
 			GPIO_SET = ningpio->valid_bits;
-			udelay(1);
+			udelay(2);
 		} else {
 			GPIO_CLR = ningpio->valid_bits;
-			udelay(1);
+			udelay(2);
 			GPIO_SET = ningpio->valid_bits;
-			udelay(3);
+			udelay(4);
 		}
 	}
 	
 	/* send stop bit (let pull-up handle the last 2us)*/
 	GPIO_CLR = ningpio->valid_bits;
-	udelay(1);
+	udelay(2);
 	GPIO_SET = ningpio->valid_bits;
 	
 	/* set the GPIOs back to inputs */
@@ -332,7 +349,7 @@
 };
 
 #define GC_GCUBE_REQUEST_LENGTH   24            /* transmit request sequence is 24 bits long (without stop bit) */
-#define GC_GCUBE_REQUEST          0x40c002U 	/* the request data command */
+#define GC_GCUBE_REQUEST          0x400002U 	/* the request data command */
 
 #define GC_GCUBE_LENGTH			  65			/* Gamecube response length, including stop bit */
 
@@ -387,16 +404,11 @@
 
 			input_report_abs(dev, ABS_X, x);
 			input_report_abs(dev, ABS_Y, 0xff - y);
-			input_report_abs(dev, ABS_RX, x2);
-			input_report_abs(dev, ABS_RY, 0xff - y2);
-			input_report_abs(dev, ABS_GAS, y3);
-			input_report_abs(dev, ABS_BRAKE, y4);			
-			
-			input_report_abs(dev, ABS_HAT0X,
-					 !(s & data[15]) - !(s & data[14]));
-			input_report_abs(dev, ABS_HAT0Y,
-					 !(s & data[12]) - !(s & data[13]));
-
+			//input_report_abs(dev, ABS_RX, x2);
+			//input_report_abs(dev, ABS_RY, 0xff - y2);
+			//input_report_abs(dev, ABS_GAS, y3);
+			//input_report_abs(dev, ABS_BRAKE, y4);			
+	
 			for (j = 0; j < 8; j++)
 				input_report_key(dev, gc_gcube_btn[j],
 						 s & data[gc_gcube_bytes[j]]);
@@ -406,7 +418,6 @@
 	}
 }
 
-
 /*
  * NES/SNES support.
  */
@@ -906,10 +917,10 @@
 			__set_bit(gc_gcube_btn[i], input_dev->keybit);
 
 		for (i = 0; i < 2; i++) {
-			input_set_abs_params(input_dev, ABS_X + i, 0, 255, 0, 2);
-			input_set_abs_params(input_dev, ABS_RX + i, 0, 255, 0, 2);
-			input_set_abs_params(input_dev, ABS_GAS + i, 0, 255, 0, 2);
-			input_set_abs_params(input_dev, ABS_HAT0X + i, -1, 1, 0, 0);
+			input_set_abs_params(input_dev, ABS_X + i, 0, 255, 3, 10);
+			//input_set_abs_params(input_dev, ABS_RX + i, 0, 255, 3, 10);
+			//input_set_abs_params(input_dev, ABS_GAS + i, 0, 255, 3, 10);
+			//input_set_abs_params(input_dev, ABS_HAT0X + i, -1, 1, 0, 0);
 		}
 
 		/* create bitvectors read/write operations */
@@ -1086,4 +1097,3 @@
 
 module_init(gc_init);
 module_exit(gc_exit);